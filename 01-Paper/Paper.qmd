---
title: ""
subtitle: ""
author: 
  - Haowei Fan
thanks: "Code and data are available at: "
date: today
date-format: long
abstract: ""
format: pdf
toc-depth: 2    
number-sections: true
toc: true           
toc-title: "Table of Contents" 
bibliography: references.bib
---

```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE}
#### Workspace setup ####
set.seed(912)
# List of necessary packages
packages <- c("tidyverse", "ggplot2", "knitr", "gridExtra", "tidyverse", "lubridate", "forecast", "tseries", "ggplot2", "xgboost", "caret", "slider", "rugarch")
# Install missing packages
missing_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
install.packages(missing_packages)
# Load packages
lapply(packages, library, character.only = TRUE)

#### Read data ####
prices <- read.csv(here::here("00-data/price.csv"))
climate <- read.csv(here::here("00-data/climate.csv"))
```


# Introduction

本项目旨在构建并评估一个用于预测可可（cocoa）价格的模型。作为一种关键的农产品，可可在全球食品产业链中扮演着重要角色，其价格波动不仅影响巧克力制造商的成本控制，也对主要可可生产国的经济稳定性产生深远影响。尤其是对加纳和科特迪瓦等以可可出口为主要外汇来源的发展中国家而言，准确预测可可价格对于财政预算编制、货币政策调控和农业补贴安排具有重要现实意义。

本研究的动机源于可可价格在过去几十年中的剧烈波动对相关国家经济造成的重大影响。例如，1990年科特迪瓦可可危机中，政府将可可收购价砍半，导致农民收入骤降和社会服务支出减少；又如2016年加纳可可价格暴跌，引发银行业信贷紧缩与违约风险上升，严重冲击金融系统稳定。这些历史事件凸显了提前掌握价格走势的重要性。（！！需要文献！！）

literacy review。。。。，本项目的不同之处。。。。

本研究的大致方法是。。。。

本研究的主要发现是。。。。

本文的结构是。。。。

NOTE: 文献在references。bib里面。


# Methodology

###注意，我在此部分写的代码，是为了方便分析，后面全部要删掉。但是后面部分的兄弟可以进行参考###

首先，我们通过previous study确认了几个对于cocoa价格非常重要的几个因素。并且将数据整理成了以月为单位而不是天，每个月的数据是由那个月的平均计算得出。
```{r}
### Load and Aggregate Cocoa Price Data to Monthly
prices <- read.csv(here::here("00-data/price.csv"))
prices$Date <- as.Date(prices$Date, format='%d/%m/%Y')
prices$Price <- as.numeric(gsub(",", "", prices$ICCO.daily.price..US..tonne.))
prices <- prices %>%
  mutate(YearMonth = floor_date(Date, "month")) %>%
  group_by(YearMonth) %>%
  summarise(Price = mean(Price, na.rm = TRUE)) %>%
  ungroup()

### Load and Aggregate Ghana Weather Data to Monthly
climate <- read.csv(here::here("00-data/climate.csv"))
climate$DATE <- as.Date(climate$DATE)
climate <- climate %>%
  mutate(YearMonth = floor_date(DATE, "month")) %>%
  group_by(YearMonth) %>%
  summarise(across(c(PRCP, TAVG, TMAX, TMIN), mean, na.rm = TRUE))

### Merge and Clean Monthly Data
cocoa_data <- left_join(prices, climate, by = "YearMonth")
```

```{r}
### Plot Monthly Time Series
ggplot(cocoa_data, aes(x = YearMonth)) +
  geom_line(aes(y = Price), color = "steelblue") +
  labs(title = "Monthly Cocoa Prices", y = "Price", x = "Date") +
  theme_minimal()
```

随后我们给response variable 也就是price 取了一个log，并且做了difference，直到看起来是stationary的。
```{r}
cocoa_data <- cocoa_data %>%
  mutate(log_price = log(Price)) %>%
  drop_na()
### Plot Monthly Time Series
ggplot(cocoa_data, aes(x = YearMonth)) +
  geom_line(aes(y = log_price), color = "steelblue") +
  labs(title = "Monthly Cocoa Prices", y = "log_price", x = "Date") +
  theme_minimal()
```
```{r}
### Merge and Clean Monthly Data
cocoa_data <- cocoa_data %>%
  mutate(diff_log_price = c(NA, diff(log_price))) %>%
  drop_na()
### Plot Monthly Time Series
ggplot(cocoa_data, aes(x = YearMonth)) +
  geom_line(aes(y = diff_log_price), color = "steelblue") +
  labs(title = "Monthly Cocoa Prices", y = "diff_log_price", x = "Date") +
  theme_minimal()
```
然后我们数据分成了7:3，其中7成是训练，3成是测试。

我们用训练数据训练了以下的备选模型：ETS，ARIMA，SARIMA，Linear Regression Model，ARCH/GARCH。

模型训练好了以后，我们用测试集测试这些模型的好坏，并且将做了transform的模型，transform predictions back to origin （比如说，做了log，我们就给预测值做一个exponential）

我们通过对比图像以及sum square of erro, AIC，BIC。。。。来对比这些模型。最后选出最好的模型。









# Data
```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE}
prices <- read.csv(here::here("00-data/price.csv"))
climate <- read.csv(here::here("00-data/climate.csv"))
# Convert date formats
prices$Date <- as.Date(prices$Date, format='%d/%m/%Y')
climate$DATE <- as.Date(climate$DATE)

# Clean price data (remove commas and convert to numeric)
prices$Price <- as.numeric(gsub(",", "", prices$ICCO.daily.price..US..tonne.))

# Select and arrange data
prices <- prices %>% select(Date, Price) %>% arrange(Date)

# Aggregate weather data by date (mean values for daily observations)
climate <- climate %>%
  group_by(DATE) %>%
  summarise(across(c(PRCP, TAVG, TMAX, TMIN), mean, na.rm = TRUE))

# Merge cocoa prices with weather data
cocoa_data <- left_join(prices, climate, by = c("Date" = "DATE"))
cocoa_data <- na.omit(cocoa_data) # Remove missing values

```


```{r}
#| warning: false
#| message: false
#| echo: false
#| label: tbl-varibales
#| tbl-cap: "Summary Statistics of Important Variables"

tbl_data <- cocoa_data
colnames(tbl_data) <- c("Date", "Price", "Daily Perception", 
                          "Average Temperature", 
                          "Maximum Temperature", 
                          "Minimum Temperature")

knitr::kable(summary(tbl_data))
```


```{r, fig.pos="H"}
#| warning: false
#| message: false
#| echo: false
#| label: fig-series
#| fig-cap: "Time Series of Cocoa Price, Local Average Temperature, and Precipitation"

plot_price <- ggplot(cocoa_data, aes(x = Date, y = Price)) +
  geom_line(color = "blue") +
  labs(title = "Cocoa Price Over Time",
       x = "Date", 
       y = "Cocoa Price in USD") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
  axis.title = element_text(size = 8))

plot_temp <- ggplot(cocoa_data, aes(x = Date, y = TAVG)) +
  geom_line(color = "red") +
  labs(title = "Daily Average Temperature Over Time",
       x = "Date", 
       y = "Temperature in °C") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
  axis.title = element_text(size = 8))

plot_prcp <- ggplot(cocoa_data, aes(x = Date, y = PRCP)) +
  geom_line(color = "darkgreen") +
  labs(title ="Daily Precipitation Over Time",
       x = "Date", 
       y = "Precipitation in mm") +
  theme_minimal() +
  theme(plot.title = element_text(size = 8),
  axis.title = element_text(size = 8))

grid.arrange(
  plot_price,
  arrangeGrob(plot_temp, plot_prcp, ncol = 2),
  nrow = 2
)
```

```{r, fig.pos="H", fig.width=8,fig.height=5}
#| warning: false
#| message: false
#| echo: false
#| label: fig-pricedecom
#| fig-cap: "Decompose of Series of Prices"

price_ts <- ts(cocoa_data$Price, start = c(year(min(cocoa_data$Date)), month(min(cocoa_data$Date))), frequency = 365)
decomp <- stl(price_ts, s.window = "periodic")

plot(decomp)
```





